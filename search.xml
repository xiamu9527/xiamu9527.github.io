<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>接口自动化框架搭建（一）</title>
      <link href="/2024/06/13/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/index.html"/>
      <url>/2024/06/13/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/index.html</url>
      
        <content type="html"><![CDATA[<p>Pytest+Allure+Jenkins+DingDing接口自动化框架实现。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>目前测试行业较常用的接口自动化框架包括Pytest、Allure、Jenkins和DingDing。实现自动化测试的方式多种多样，通常根据公司实际情况选择管理接口自动化测试步骤的形式，例如使用yaml文件、excel表格或数据库等。核心思想是完成接口的关联、步骤的引用以及多种断言方式（多层级、多字段、多形式）。框架使用的工具、第三方库或实现方式仅供参考，不一定是最佳方案。</p></blockquote><h3 id="搭建思路"><a href="#搭建思路" class="headerlink" title="搭建思路"></a>搭建思路</h3><ol><li>封装requests.Session().request来发送不同请求方式的请求</li><li>字典映射不同的请求数据类型</li><li>在发送请求前通过反射函数来替换数据中的变量</li><li>jsonpath提取响应设置变量或断言</li><li>封装数据库连接池及CRUD方法实现数据库断言及环境清理</li><li>封装allure清理函数，收集报告情况</li><li>关联钉钉群聊机器人，发送报告情况并@相关人员</li></ol><h2 id="1、设计用例数据结构"><a href="#1、设计用例数据结构" class="headerlink" title="1、设计用例数据结构"></a>1、设计用例数据结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">@Name: case_base.py</span></span><br><span class="line"><span class="string">@Date: 2024/6/14-10:51</span></span><br><span class="line"><span class="string">@Email: xiamu9527@outlook.com </span></span><br><span class="line"><span class="string">封装用例实现类来管理测试数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StepInfo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    步骤信息类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    该类负责处理来自不同数据源的数据，通过提供数据本身、数据路径、SQL查询语句以及备注信息来初始化一个数据处理实例。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        data: 原始数据，可以是任何数据类型，取决于具体的数据处理需求。</span></span><br><span class="line"><span class="string">        json_path_dict: 一个字典，包含JSON路径和对应的字段名，用于提取响应数据。</span></span><br><span class="line"><span class="string">        sql_dict: 一个字典，包含SQL语句和对应的操作，用于处理数据库中的数据。</span></span><br><span class="line"><span class="string">        remarks: 对当前数据处理实例的备注或说明，可以是任何字符串。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, step_name, step_url, step_method, step_header,step_body, step_jsonpath: <span class="built_in">dict</span>, step_assert: <span class="built_in">dict</span>,step_sql</span>):</span><br><span class="line">        self.step_name = step_name</span><br><span class="line">        self.step_url = step_url</span><br><span class="line">        self.step_method = step_method</span><br><span class="line">        self.step_header = step_header</span><br><span class="line">        self.step_body:<span class="built_in">dict</span> = step_body <span class="comment">#&#123;请求类型:请求体&#125;</span></span><br><span class="line">        self.step_jsonpath:<span class="built_in">dict</span> = step_jsonpath</span><br><span class="line">        self.step_assert:<span class="built_in">dict</span> = step_assert</span><br><span class="line">        self.step_sql:<span class="built_in">dict</span> = step_sql</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;步骤名称:<span class="subst">&#123;self.step_name&#125;</span>,请求地址:<span class="subst">&#123;self.step_url&#125;</span>,请求方法:<span class="subst">&#123;self.step_method&#125;</span>,请求头:<span class="subst">&#123;self.step_header&#125;</span>,请求体:<span class="subst">&#123;self.step_body&#125;</span>,JSON路径:<span class="subst">&#123;self.step_jsonpath&#125;</span>,断言:<span class="subst">&#123;self.step_assert&#125;</span>,SQL:<span class="subst">&#123;self.step_sql&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CaseInfo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用例信息类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, case_id, name, step_list: <span class="built_in">list</span>, clear_dict: <span class="built_in">dict</span></span>):</span><br><span class="line">        self.case_id = case_id  <span class="comment"># 用例id</span></span><br><span class="line">        self.name = name  <span class="comment"># 用例名称</span></span><br><span class="line">        self.step_list = []  <span class="comment"># 步骤列表</span></span><br><span class="line">        self.clear_dict = &#123;&#125;  <span class="comment"># 环境清理字典</span></span><br><span class="line">        <span class="comment"># 添加步骤</span></span><br><span class="line">        <span class="keyword">for</span> step_info <span class="keyword">in</span> step_list:</span><br><span class="line">            step_obj=StepInfo(step_info[<span class="string">&#x27;step_name&#x27;</span>],step_info[<span class="string">&#x27;step_url&#x27;</span>],step_info[<span class="string">&#x27;step_method&#x27;</span>],step_info[<span class="string">&#x27;step_header&#x27;</span>],step_info[<span class="string">&#x27;step_body&#x27;</span>],step_info[<span class="string">&#x27;step_jsonpath&#x27;</span>],step_info[<span class="string">&#x27;step_assert&#x27;</span>],step_info[<span class="string">&#x27;step_sql&#x27;</span>])</span><br><span class="line">            self.step_list.append(step_obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;用例ID:<span class="subst">&#123;self.case_id&#125;</span>,用例名称:<span class="subst">&#123;self.name&#125;</span>,步骤列表:<span class="subst">&#123;[step_info.__str__() <span class="keyword">for</span> step_info <span class="keyword">in</span> self.step_list]&#125;</span>,环境清理字典:<span class="subst">&#123;self.clear_dict&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-1、yaml文件中用例数据"><a href="#1-1、yaml文件中用例数据" class="headerlink" title="1.1、yaml文件中用例数据"></a>1.1、yaml文件中用例数据</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用例文件的配置模板</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">case_id:</span> <span class="number">1</span> <span class="comment"># 测试用例id</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">登录成功</span> <span class="comment"># 测试用例名称</span></span><br><span class="line">  <span class="attr">clear_data:</span> <span class="comment"># 测试用例清理数据</span></span><br><span class="line">    <span class="attr">clean_sql:</span> <span class="comment"># delete from table where id = XXX # 测试用例清理sql</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">step_name:</span> <span class="string">登录</span> <span class="comment">#步骤名称</span></span><br><span class="line">      <span class="attr">step_url:</span> <span class="string">/login</span> <span class="comment"># 步骤url</span></span><br><span class="line">      <span class="attr">step_method:</span> <span class="string">POST</span> <span class="comment"># 步骤请求方法</span></span><br><span class="line">      <span class="attr">step_header:</span> <span class="comment"># 步骤请求头</span></span><br><span class="line">      <span class="attr">step_body:</span> <span class="comment">#步骤请求体</span></span><br><span class="line">        <span class="attr">json:</span> <span class="comment"># 步骤请求体格式</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">admin</span> <span class="comment"># 步骤请求体参数</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">admin123</span></span><br><span class="line">      <span class="attr">step_jsonpath:</span></span><br><span class="line">        <span class="attr">token:</span> <span class="string">$.token</span> <span class="comment">#变量名及变量提取表达式</span></span><br><span class="line">      <span class="attr">step_assert:</span> <span class="comment"># 步骤断言</span></span><br><span class="line">        <span class="string">$.token:</span></span><br><span class="line">          <span class="attr">is_not_null:</span>  <span class="comment"># 断言表达式</span></span><br><span class="line">      <span class="attr">step_sql:</span></span><br><span class="line">        <span class="attr">select:</span> <span class="comment"># select * from table where name = &#x27;XXX&#x27; # 步骤sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    - step_name: 步骤名称2</span></span><br><span class="line"><span class="comment">#      step_url: 步骤url</span></span><br><span class="line"><span class="comment">#      step_method: 步骤请求方法</span></span><br><span class="line"><span class="comment">#      step_header: 步骤请求头</span></span><br><span class="line"><span class="comment">#      step_body: 步骤请求体</span></span><br><span class="line"><span class="comment">#      step_jsonpath:</span></span><br><span class="line"><span class="comment">#        token: $.token #变量名及变量提取表达式</span></span><br><span class="line"><span class="comment">#      step_assert: # 步骤断言</span></span><br><span class="line"><span class="comment">#        $.code: 1 # 断言表达式</span></span><br><span class="line"><span class="comment">#      step_sql:</span></span><br><span class="line"><span class="comment">#        select: select * from table where name = &#x27;XXX&#x27; # 步骤sql</span></span><br></pre></td></tr></table></figure><h3 id="1-2、编写工具类读取用例文件"><a href="#1-2、编写工具类读取用例文件" class="headerlink" title="1.2、编写工具类读取用例文件"></a>1.2、编写工具类读取用例文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_yaml_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    安全地加载给定路径的YAML文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        file_path (str): YAML文件的路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        加载后的YAML数据（dict或其他Python对象）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">        FileNotFoundError: 如果文件不存在。</span></span><br><span class="line"><span class="string">        PermissionError: 如果没有足够的权限读取文件。</span></span><br><span class="line"><span class="string">        yaml.YAMLError: 如果YAML文件格式不正确。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证文件路径的有效性</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;文件 &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27; 不存在。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保程序有权限读取文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.access(file_path, os.R_OK):</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;没有足够的权限读取文件 &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27;。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用安全加载方法来避免YAML解析时的潜在安全问题</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> yaml.safe_load(f)</span><br><span class="line">    <span class="keyword">except</span> yaml.YAMLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 捕获YAML格式错误，提供明确的错误信息</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;文件 &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27; 不是一个有效的YAML文件。错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3、读取配置文件并实例化用例对象"><a href="#1-3、读取配置文件并实例化用例对象" class="headerlink" title="1.3、读取配置文件并实例化用例对象"></a>1.3、读取配置文件并实例化用例对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_case_object</span>():</span><br><span class="line">    case_data=load_yaml_file(<span class="string">r&#x27;D:\xiamu\pythonProject\auto-test-demo\case_file\demo.yaml&#x27;</span>)</span><br><span class="line">    case_list = []</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">in</span> case_data:</span><br><span class="line">        case_obj=CaseInfo(<span class="keyword">case</span>[<span class="string">&#x27;case_id&#x27;</span>], <span class="keyword">case</span>[<span class="string">&#x27;name&#x27;</span>], <span class="keyword">case</span>[<span class="string">&#x27;steps&#x27;</span>], <span class="keyword">case</span>[<span class="string">&#x27;clear_data&#x27;</span>])</span><br><span class="line">        case_list.append(case_obj)</span><br><span class="line">    <span class="keyword">return</span> case_list</span><br></pre></td></tr></table></figure><h3 id="1-4、设置系统设置文件"><a href="#1-4、设置系统设置文件" class="headerlink" title="1.4、设置系统设置文件"></a>1.4、设置系统设置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">@Name: config_data.py</span></span><br><span class="line"><span class="string">@Date: 2024/6/14-17:09</span></span><br><span class="line"><span class="string">@Email: xiamu9527@outlook.com </span></span><br><span class="line"><span class="string">系统配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  <span class="comment"># 项目路径</span></span><br><span class="line">CASE_PATH = os.path.join(PATH, <span class="string">&#x27;case_file&#x27;</span>)</span><br><span class="line">HOST = <span class="string">&#x27;http://127.0.0.1:5000&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2、封装请求"><a href="#2、封装请求" class="headerlink" title="2、封装请求"></a>2、封装请求</h2><h3 id="2-1、基础请求"><a href="#2-1、基础请求" class="headerlink" title="2.1、基础请求"></a>2.1、基础请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">case_obj: <span class="string">&#x27;CaseInfo&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送请求</span></span><br><span class="line"><span class="string">    :param case_obj:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> case_obj.step_list:</span><br><span class="line">        <span class="built_in">print</span>()<span class="comment"># 遍历步骤列表发送多个请求</span></span><br><span class="line">        <span class="built_in">print</span>(step)</span><br><span class="line">        <span class="comment"># 根据请求方法发送不同body体</span></span><br><span class="line">        resp = requests.request(method=step.step_method, url=HOST+step.step_url, headers=step.step_header, **step.step_body)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>简单调试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase</span>:</span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;case_obj&quot;</span>, create_case_object(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_case</span>(<span class="params">self, case_obj</span>):</span><br><span class="line">        resp=send_request(case_obj)</span><br><span class="line">        <span class="built_in">print</span>(resp.json())</span><br></pre></td></tr></table></figure><blockquote><p>步骤名称:登录,请求地址:&#x2F;login,请求方法:POST,请求头:None,请求体:{‘json’: {‘username’: ‘admin’, ‘password’: ‘admin123’}},JSON路径:{‘token’: ‘$.token’},断言:{‘$.token’: {‘is_not_null’: None}},SQL:{‘select’: None}<br>{‘code’: 1, ‘message’: ‘登录成功’, ‘token’: ‘eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcxODM5MzA5MX0.zxScrfoabV1fcr4Qy49-Frbe3Cb_qnOteUk3L8PK1Dw’}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  测试  </tag>
            
            <tag>  接口  </tag>
            
            <tag>  自动化测试  </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习笔记（一）</title>
      <link href="/2024/06/11/Flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/index.html"/>
      <url>/2024/06/11/Flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/index.html</url>
      
        <content type="html"><![CDATA[<p>Flask是一个非常小的PythonWeb框架，被称为微型框架；</p><h3 id="Flask框架简介"><a href="#Flask框架简介" class="headerlink" title="Flask框架简介"></a>Flask框架简介</h3><blockquote><p>Flask是一个非常小的PythonWeb框架，被称为微型框架；只提供了一个稳健的核心，其他功能全部是通过扩展实现的；意思就是我们可以根据项目的需要量身定制，也意味着我们需要学习各种扩展库的使用。</p></blockquote><h3 id="框架结构简介"><a href="#框架结构简介" class="headerlink" title="框架结构简介"></a>框架结构简介</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用当前脚本名称实例化Flask对象，方便flask从该脚本文件中获取需要的内容</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序实例需要知道每个url请求所对应的运行代码是谁。</span></span><br><span class="line"><span class="comment">#所以程序中必须要创建一个url请求地址到python运行函数的一个映射。</span></span><br><span class="line"><span class="comment">#处理url和视图函数之间的关系的程序就是&quot;路由&quot;，在Flask中，路由是通过@app.route装饰器(以@开头)来表示的</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="comment">#url映射的函数，要传参则在上述route（路由）中添加参数申明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直属的第一个作为视图函数被绑定，第二个就是普通函数</span></span><br><span class="line"><span class="comment"># 路由与视图函数需要一一对应</span></span><br><span class="line"><span class="comment"># def not():</span></span><br><span class="line"><span class="comment">#     return &quot;Not Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个本地开发服务器，激活该网页</span></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h3 id="不同请求类型的接口及数据格式demo"><a href="#不同请求类型的接口及数据格式demo" class="headerlink" title="不同请求类型的接口及数据格式demo"></a>不同请求类型的接口及数据格式demo</h3><ul><li>GET</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    username = request.args.get(<span class="string">&#x27;username&#x27;</span>)<span class="comment">#获取请求中携带的参数</span></span><br><span class="line">    password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    authenticated_user = authenticate(username, password)</span><br><span class="line">    <span class="keyword">if</span> authenticated_user:</span><br><span class="line">        token = create_token(authenticated_user)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;用户名或密码错误&#x27;</span>&#125;), <span class="number">401</span>  <span class="comment">#返回json串和状态码from flask import jsonify</span></span><br></pre></td></tr></table></figure><ul><li>POST<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    data = request.get_json()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        email = data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(<span class="string">&quot;参数错误&quot;</span>), <span class="number">405</span></span><br><span class="line">    <span class="keyword">if</span> users_list.get(username):</span><br><span class="line">        <span class="keyword">return</span> jsonify(<span class="string">&quot;用户名已存在&quot;</span>), <span class="number">400</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        users_list[username] = password</span><br><span class="line">        users_info[username] = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="built_in">len</span>(users_list) + <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;email&#x27;</span>: email&#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;创建成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li>DELETE<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/delete/&lt;user_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">current_user,user_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> users_info.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(v[<span class="string">&#x27;id&#x27;</span>])==user_id:</span><br><span class="line">                users_info.pop(k)</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;删除成功&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;data&quot;</span>:k&#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;程序错误&quot;</span>&#125;),<span class="number">500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>PUT<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/upload&#x27;</span>, methods=[<span class="string">&#x27;PUT&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">current_user</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> password == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;参数或格式错误&quot;</span>&#125;), <span class="number">405</span></span><br><span class="line">        email = request.form.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;参数或格式错误&quot;</span>&#125;), <span class="number">405</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        users_list[current_user] = password</span><br><span class="line">        users_info[current_user] = &#123;<span class="string">&#x27;id&#x27;</span>: users_info[current_user][<span class="string">&#x27;id&#x27;</span>], <span class="string">&#x27;username&#x27;</span>: current_user, <span class="string">&#x27;email&#x27;</span>: email&#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;更新失败，程序错误&quot;</span>&#125;), <span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;更新成功&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;data&quot;</span>: users_info[current_user]&#125;)</span><br></pre></td></tr></table></figure></li><li>文件类型数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = path  <span class="comment"># 替换为你的上传目录</span></span><br><span class="line">app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>] = &#123;<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;xlsx&#x27;</span>,<span class="string">&#x27;docx&#x27;</span>&#125;  <span class="comment"># 允许的文件扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>]</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No file part&quot;</span>, <span class="number">400</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No selected file&quot;</span>, <span class="number">400</span></span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>:<span class="string">&quot;上传成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;上传地址&quot;</span>:os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Invalid file type&quot;</span>, <span class="number">400</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="封装鉴权装饰器（jwt）"><a href="#封装鉴权装饰器（jwt）" class="headerlink" title="封装鉴权装饰器（jwt）"></a>封装鉴权装饰器（jwt）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = <span class="string">&#x27;your_secret_key&#x27;</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_token</span>(<span class="params">identity</span>):</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;sub&#x27;</span>: identity,</span><br><span class="line">        <span class="string">&#x27;exp&#x27;</span>: datetime.utcnow() + timedelta(minutes=<span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jwt.encode(payload, SECRET_KEY, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token_required</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.headers.get(<span class="string">&#x27;Authorization&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token 不存在&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            token = token.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">            data = jwt.decode(token, SECRET_KEY, algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            current_user = data[<span class="string">&#x27;sub&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token 已过期&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;无效 token&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f(current_user, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br></pre></td></tr></table></figure><p>这里附上练习demo的完整源码，后续搭建接口自动化框架可做调试使用。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO,</span><br><span class="line">                   <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> <span class="comment"># 替换为你的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设有一个用户数据库，这里简化为字典</span></span><br><span class="line">users_list = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: <span class="string">&quot;admin123&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;user1&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user2&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line">users_info = &#123;</span><br><span class="line">    <span class="string">&quot;admin&quot;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;admin@example.com&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;user1&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;user1@example.com&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;user2&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;user2@example.com&#x27;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, send_from_directory</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">path=os.getcwd()</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = path  <span class="comment"># 替换为你的上传目录</span></span><br><span class="line">app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>] = &#123;<span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;xlsx&#x27;</span>,<span class="string">&#x27;docx&#x27;</span>&#125;  <span class="comment"># 允许的文件扩展名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">in</span> users_list <span class="keyword">and</span> users_list[username] == password:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;your_secret_key&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_token</span>(<span class="params">identity</span>):</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&#x27;sub&#x27;</span>: identity,</span><br><span class="line">        <span class="string">&#x27;exp&#x27;</span>: datetime.utcnow() + timedelta(minutes=<span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jwt.encode(payload, SECRET_KEY, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_from_db</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> users_info.get(username)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token_required</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.headers.get(<span class="string">&#x27;Authorization&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token is missing&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            token = token.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">            data = jwt.decode(token, SECRET_KEY, algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            current_user = data[<span class="string">&#x27;sub&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token 已过期&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;无效 token&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f(current_user, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    data = request.get_json()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        email = data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(<span class="string">&quot;参数错误&quot;</span>), <span class="number">405</span></span><br><span class="line">    <span class="keyword">if</span> users_list.get(username):</span><br><span class="line">        <span class="keyword">return</span> jsonify(<span class="string">&quot;用户名已存在&quot;</span>), <span class="number">400</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        users_list[username] = password</span><br><span class="line">        users_info[username] = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="built_in">len</span>(users_list) + <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;email&#x27;</span>: email&#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;创建成功&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No file part&quot;</span>, <span class="number">400</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No selected file&quot;</span>, <span class="number">400</span></span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>:<span class="string">&quot;上传成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;上传地址&quot;</span>:os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Invalid file type&quot;</span>, <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file/download/&lt;filename&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">current_user,filename</span>):</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        data = request.get_json()</span><br><span class="line">        username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    authenticated_user = authenticate(username, password)</span><br><span class="line">    <span class="keyword">if</span> authenticated_user:</span><br><span class="line">        token = create_token(authenticated_user)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;用户名或密码错误&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/user&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">current_user</span>):</span><br><span class="line">    <span class="comment"># 这里假设你有一个函数可以从数据库中获取用户信息，比如通过用户名</span></span><br><span class="line">    user_data = get_user_from_db(current_user)</span><br><span class="line">    <span class="keyword">if</span> user_data:</span><br><span class="line">        <span class="keyword">return</span> jsonify(user_data), <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;User not found&#x27;</span>&#125;), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/user/list&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_list_info</span>(<span class="params">current_user</span>):</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;请求成功&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;data&quot;</span>:users_info&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/upload&#x27;</span>, methods=[<span class="string">&#x27;PUT&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">current_user</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> password == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;参数或格式错误&quot;</span>&#125;), <span class="number">405</span></span><br><span class="line">        email = request.form.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;参数或格式错误&quot;</span>&#125;), <span class="number">405</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        users_list[current_user] = password</span><br><span class="line">        users_info[current_user] = &#123;<span class="string">&#x27;id&#x27;</span>: users_info[current_user][<span class="string">&#x27;id&#x27;</span>], <span class="string">&#x27;username&#x27;</span>: current_user, <span class="string">&#x27;email&#x27;</span>: email&#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;更新失败，程序错误&quot;</span>&#125;), <span class="number">500</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;更新成功&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;data&quot;</span>: users_info[current_user]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/delete/&lt;user_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">current_user,user_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> users_info.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(v[<span class="string">&#x27;id&#x27;</span>])==user_id:</span><br><span class="line">                users_info.pop(k)</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;删除成功&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;data&quot;</span>:k&#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;程序错误&quot;</span>&#125;),<span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    api_name = &#123;</span><br><span class="line">        <span class="string">&quot;登录接口&quot;</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;获取当前用户信息&quot;</span>: <span class="string">&quot;/api/user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;注册用户&quot;</span>: <span class="string">&quot;/register&quot;</span>,</span><br><span class="line">        <span class="string">&quot;修改用户信息&quot;</span>:<span class="string">&quot;/api/upload&quot;</span>,</span><br><span class="line">        <span class="string">&quot;删除用户&quot;</span>:<span class="string">&quot;/api/delete/&lt;user_id&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件上传&quot;</span>:<span class="string">&quot;/file/upload&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件下载&quot;</span>: <span class="string">&quot;/file/download/&lt;filename&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;获取所有用户信息&quot;</span>:<span class="string">&quot;/api/user/list&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    api_method = &#123;</span><br><span class="line">        <span class="string">&quot;登录接口&quot;</span>: <span class="string">&#x27;POST、GET&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;获取当前用户信息&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="string">&quot;注册用户&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="string">&quot;修改用户信息&quot;</span>: <span class="string">&quot;PUT(form)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;删除用户&quot;</span>:<span class="string">&quot;DELETE(path)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件上传&quot;</span>: <span class="string">&quot;POST(file)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件下载&quot;</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="string">&quot;获取所有用户信息&quot;</span>: <span class="string">&quot;GET&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    api_key = &#123;</span><br><span class="line">        <span class="string">&quot;登录接口&quot;</span>: <span class="string">&#x27;username、password&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;获取当前用户信息&quot;</span>: <span class="string">&quot;无&quot;</span>,</span><br><span class="line">        <span class="string">&quot;注册用户&quot;</span>: <span class="string">&quot;username、password、email&quot;</span>,</span><br><span class="line">        <span class="string">&quot;修改用户信息&quot;</span>:<span class="string">&quot;password、email&quot;</span>,</span><br><span class="line">        <span class="string">&quot;删除用户&quot;</span>:<span class="string">&quot;无&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件上传&quot;</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">        <span class="string">&quot;文件下载&quot;</span>: <span class="string">&quot;filename&quot;</span>,</span><br><span class="line">        <span class="string">&quot;获取所有用户信息&quot;</span>: <span class="string">&quot;无&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接口列表:&quot;</span>)</span><br><span class="line">    [<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>===&gt;<span class="subst">&#123;v&#125;</span>&quot;</span>) <span class="keyword">for</span> k,v <span class="keyword">in</span> api_name.items()]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求方式:&quot;</span>)</span><br><span class="line">    [<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>===&gt;<span class="subst">&#123;v&#125;</span>&quot;</span>) <span class="keyword">for</span> k, v <span class="keyword">in</span> api_method.items()]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求体内容:&quot;</span>)</span><br><span class="line">    [<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>===&gt;<span class="subst">&#123;v&#125;</span>&quot;</span>) <span class="keyword">for</span> k, v <span class="keyword">in</span> api_key.items()]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;管理员账号&quot;</span>,<span class="string">&quot;admin/admin123&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;输入任意键开始&quot;</span>)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag>  Flask  </tag>
            
            <tag>  Web  </tag>
            
            <tag>  后端  </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
